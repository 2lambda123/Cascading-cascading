<?xml version="1.0"?>

<!--
  ~ Copyright (c) 2007-2010 Concurrent, Inc. All Rights Reserved.
  ~
  ~ Project and contact information: http://www.cascading.org/
  ~
  ~ This file is part of the Cascading project.
  ~
  ~ Cascading is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ Cascading is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with Cascading.  If not, see <http://www.gnu.org/licenses/>.
  -->

<project name="cascading" default="compile" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

  <dirname property="cascading.basedir" file="${ant.file.cascading}"/>

  <property name="build.number" value="dev"/>
  <property file="${user.home}/build.properties"/>
  <property file="${cascading.basedir}/version.properties"/>
  <property file="${cascading.basedir}/build.properties"/>

  <property name="cascading.release.major" value="x.y"/>
  <property name="cascading.release.minor" value="z"/>

  <condition property="cascading.release.version" value="${cascading.release.major}"
             else="${cascading.release.major}.${cascading.release.minor}">
    <length string="${cascading.release.minor}" trim="true" length="0"/>
  </condition>

  <condition property="cascading.release.build" value="${build.number}"
             else="wip-${build.number}">
    <isset property="cascading.release.final"/>
  </condition>

  <condition property="cascading.release.full" value="${cascading.release.version}"
             else="${cascading.release.version}-${cascading.release.build}">
    <isset property="cascading.release.final"/>
  </condition>

  <property name="cascading.hadoop.compatible.version" value="current"/>

  <property name="javac.debug" value="true"/>
  <property name="test.haltonerror" value="true"/>

  <property name="src" location="${cascading.basedir}/src"/>
  <property name="src.core" location="${src}/core"/>
  <property name="src.xml" location="${src}/xml"/>
  <property name="src.local" location="${src}/local"/>
  <property name="src.hadoop" location="${src}/hadoop"/>
  <property name="src.test" location="${src}/test"/>

  <property name="build" location="${cascading.basedir}/build/"/>
  <property name="build.classes" location="${build}"/>
  <property name="build.core" location="${build.classes}/core"/>
  <property name="build.xml" location="${build.classes}/xml"/>
  <property name="build.local" location="${build.classes}/local"/>
  <property name="build.hadoop" location="${build.classes}/hadoop"/>
  <property name="build.test" location="${build.classes}/test"/>

  <property name="test.results" location="${build}/testresults"/>
  <property name="test.output.root" location="${build}/test/output"/>
  <property name="test.showoutput" value="no"/>

  <property name="test.cluster.enabled" value="true"/>

  <property name="lib" location="${cascading.basedir}/lib"/>
  <property name="lib.core" location="${lib}/core"/>
  <property name="lib.xml" location="${lib}/xml"/>
  <property name="lib.local" location="${lib}/local"/>
  <property name="lib.hadoop" location="${lib}/hadoop"/>
  <property name="lib.test" location="${lib}/test"/>

  <property name="dist" location="${cascading.basedir}/dist"/>
  <property name="javadoc" location="${cascading.basedir}/javadoc"/>
  <property name="log" location="${cascading.basedir}/log"/>

  <!--<property name="hadoop.home" location="${cascading.basedir}/../hadoop"/>-->

  <property name="jar.cascading" value="cascading-${cascading.release.full}.jar"/>
  <property name="jar.cascading-core" value="cascading-core-${cascading.release.full}.jar"/>
  <property name="jar.cascading-xml" value="cascading-xml-${cascading.release.full}.jar"/>
  <property name="jar.cascading-local" value="cascading-local-${cascading.release.full}.jar"/>
  <property name="jar.cascading-hadoop" value="cascading-hadoop-${cascading.release.full}.jar"/>
  <property name="jar.cascading-test" value="cascading-test-${cascading.release.full}.jar"/>

  <property name="tar.cascading.prefix"
            value="cascading-${cascading.release.full}-${cascading.hadoop.compatible.version}"/>
  <property name="tar.cascading" value="${tar.cascading.prefix}.tgz"/>

  <path id="build.classpath">
    <pathelement location="${build.core}"/>
    <pathelement location="${build.xml}"/>
    <pathelement location="${build.local}"/>
    <pathelement location="${build.hadoop}"/>
    <pathelement location="${build.test}"/>
  </path>

  <path id="build.classpath.core">
    <pathelement location="${build.core}"/>
  </path>

  <path id="build.classpath.xml">
    <pathelement location="${build.xml}"/>
  </path>

  <path id="build.classpath.local">
    <pathelement location="${build.local}"/>
  </path>

  <path id="build.classpath.hadoop">
    <pathelement location="${build.hadoop}"/>
  </path>

  <path id="build.classpath.test">
    <pathelement location="${build.test}"/>
  </path>

  <path id="deps.classpath.core">
    <fileset dir="${lib.core}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <path id="deps.classpath.xml">
    <fileset dir="${lib.xml}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <path id="deps.classpath.local">
    <fileset dir="${lib.local}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <path id="deps.classpath.hadoop">
    <fileset dir="${lib.hadoop}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <path id="deps.classpath.test">
    <fileset dir="${lib.test}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <path id="jars.classpath">
    <fileset dir="${build}" erroronmissingdir="false">
      <include name="cascading-core-*.jar"/>
      <include name="cascading-xml-*.jar"/>
      <include name="cascading-local-*.jar"/>
      <include name="cascading-hadoop-*.jar"/>
      <include name="cascading-test-*.jar"/>
    </fileset>

    <fileset dir="${basedir}" erroronmissingdir="false">
      <include name="cascading-core-*.jar"/>
      <include name="cascading-xml-*.jar"/>
      <include name="cascading-local-*.jar"/>
      <include name="cascading-hadoop-*.jar"/>
      <include name="cascading-test-*.jar"/>
    </fileset>
  </path>

  <path id="project.classpath">
    <path refid="build.classpath"/>
    <path refid="deps.classpath.core"/>
    <path refid="deps.classpath.xml"/>
    <path refid="deps.classpath.local"/>
    <path refid="deps.classpath.hadoop"/>
    <path refid="deps.classpath.test"/>
  </path>

  <path id="package.classpath">
    <path refid="jars.classpath"/>
    <path refid="deps.classpath.core"/>
    <path refid="deps.classpath.xml"/>
    <path refid="deps.classpath.local"/>
    <path refid="deps.classpath.hadoop"/>
    <path refid="deps.classpath.test"/>
  </path>

  <path id="project.srcpath">
    <pathelement location="${src.core}"/>
    <pathelement location="${src.xml}"/>
    <pathelement location="${src.local}"/>
    <pathelement location="${src.hadoop}"/>
    <pathelement location="${src.test}"/>
  </path>

  <path id="javadoc.srcpath">
    <pathelement location="${src.core}"/>
    <pathelement location="${src.xml}"/>
    <pathelement location="${src.local}"/>
    <pathelement location="${src.hadoop}"/>
  </path>

  <!-- sets up environment -->
  <target name="init">
    <echo message="initializing cascading environment..."/>

    <mkdir dir="${build.core}"/>
    <mkdir dir="${build.xml}"/>
    <mkdir dir="${build.local}"/>
    <mkdir dir="${build.hadoop}"/>
    <mkdir dir="${build.test}"/>
    <mkdir dir="${test.results}"/>

    <!--<property name="CLASSPATH" refid="project.classpath"/>-->
    <!--<echo message="${CLASSPATH}"/>-->
  </target>

  <target name="echo-compile-buildnum" unless="cascading.release.final">
    <echo message="build.number=${cascading.release.build}" file="${build.core}/cascading/build.number.properties"/>
  </target>

  <target name="compile.core" depends="init,echo-compile-buildnum">
    <javac srcdir="${src.core}" destdir="${build.core}" verbose="off" debug="${javac.debug}" includeantruntime="false">
      <classpath refid="deps.classpath.core"/>
    </javac>

    <copy todir="${build.core}/cascading" file="${cascading.basedir}/version.properties"/>

    <copy todir="${build.core}">
      <fileset dir="${src.core}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.xml" depends="init,echo-compile-buildnum,compile.core">
    <javac srcdir="${src.xml}" destdir="${build.xml}" verbose="off" debug="${javac.debug}" includeantruntime="false">
      <classpath refid="build.classpath.core"/>
      <classpath refid="deps.classpath.core"/>
      <classpath refid="deps.classpath.xml"/>
    </javac>

    <copy todir="${build.xml}">
      <fileset dir="${src.xml}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.local" depends="init,echo-compile-buildnum,compile.core">
    <javac srcdir="${src.local}" destdir="${build.local}" verbose="off" debug="${javac.debug}"
           includeantruntime="false">
      <classpath refid="build.classpath.core"/>
      <classpath refid="deps.classpath.core"/>
      <classpath refid="deps.classpath.local"/>
    </javac>

    <copy todir="${build.local}">
      <fileset dir="${src.local}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.hadoop" depends="init,echo-compile-buildnum,compile.core">
    <javac srcdir="${src.hadoop}" destdir="${build.hadoop}" verbose="off" debug="${javac.debug}"
           includeantruntime="false">
      <classpath refid="build.classpath.core"/>
      <classpath refid="deps.classpath.core"/>
      <classpath refid="deps.classpath.hadoop"/>
    </javac>

    <copy todir="${build.hadoop}">
      <fileset dir="${src.hadoop}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.test"
          depends="init,echo-compile-buildnum,compile.core,compile.xml,compile.local,compile.hadoop">
    <javac srcdir="${src.test}" destdir="${build.test}" verbose="off" debug="${javac.debug}" includeantruntime="false">
      <classpath refid="deps.classpath.core"/>
      <classpath refid="build.classpath.core"/>
      <classpath refid="deps.classpath.xml"/>
      <classpath refid="build.classpath.xml"/>
      <classpath refid="deps.classpath.local"/>
      <classpath refid="build.classpath.local"/>
      <classpath refid="deps.classpath.hadoop"/>
      <classpath refid="build.classpath.hadoop"/>
      <classpath refid="deps.classpath.test"/>
    </javac>

    <copy todir="${build.test}">
      <fileset dir="${src.test}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>
  </target>

  <target name="compile"
          depends="init,echo-compile-buildnum,compile.core,compile.xml,compile.local,compile.hadoop,compile.test"/>

  <target name="javadoc" depends="init">
    <echo message="creating cascading javadoc..."/>
    <delete dir="${javadoc}"/>
    <mkdir dir="${javadoc}"/>

    <javadoc sourcepathref="javadoc.srcpath"
             destdir="${javadoc}"
             packagenames="cascading.*"
             windowtitle="Cascading ${cascading.release.major}">
      <classpath refid="project.classpath"/>
      <link href="http://java.sun.com/javase/6/docs/api/"/>
      <link href="http://dist.codehaus.org/janino/javadoc/"/>
      <link href="http://hadoop.apache.org/common/docs/r0.20.2/api/"/>
      <bottom><![CDATA[<i>Copyright &#169; 2007-2011 Concurrent, Inc. All Rights Reserved.</i>]]></bottom>
    </javadoc>

  </target>

  <!-- runs JUnit tests -->
  <target name="test" depends="test-none,test-local,test-hadoop,test-compare"/>

  <target name="test-local" depends="init, compile">
    <antcall target="test-generic">
      <param name="test.platform" value="local"/>
      <param name="test.platform.classname" value="cascading.test.LocalPlatform"/>
    </antcall>
  </target>

  <target name="test-hadoop" depends="init, compile">
    <antcall target="test-generic">
      <param name="test.platform" value="hadoop"/>
      <param name="test.platform.classname" value="cascading.test.HadoopPlatform"/>
    </antcall>
  </target>

  <target name="test-none" depends="init, compile">
    <antcall target="test-generic">
      <param name="test.platform" value="none"/>
      <param name="test.platform.classname" value=""/>
    </antcall>
  </target>

  <target name="test-compare" depends="init, compile, test-local, test-hadoop">
    <antcall target="test-generic">
      <param name="test.platform" value="compare"/>
      <param name="test.platform.classname" value=""/>
    </antcall>
  </target>

  <target name="test-generic" depends="init, compile">
    <echo message="running all cascading tests for ${test.platform} ..."/>

    <mkdir dir="build/test/log"/>

    <property name="test.platform" value="local"/>

    <junit printsummary="true" showoutput="${test.showoutput}" fork="yes" haltonerror="no" haltonfailure="no" dir="."
           maxmemory="756m">

      <sysproperty key="test.platform.classname" value="${test.platform.classname}"/>
      <sysproperty key="test.output.root" value="${test.output.root}"/>
      <sysproperty key="test.cluster.enabled" value="${test.cluster.enabled}"/>
      <sysproperty key="test.build.data" value="data"/>
      <sysproperty key="hadoop.log.dir" value="build/test/log/${test.platform}"/>

      <!--<jvmarg value="-Xdebug"/>--><!--<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"/>-->

      <classpath>
        <path refid="project.classpath"/>
        <pathelement path="${java.class.path}"/>
      </classpath>
      <formatter type="plain" usefile="true"/>

      <batchtest todir="${test.results}" haltonfailure="${test.haltonerror}">
        <fileset dir="${src.test}">
          <include name="**/*Test.java"/>
          <containsregexp expression="@PlatformTest.*${test.platform}"/>
        </fileset>
      </batchtest>
    </junit>

  </target>

  <target name="run-test-package">
    <echo message="running all packaged cascading tests..."/>

    <mkdir dir="package-tests"/>

    <untar src="${tar.cascading}" compression="gzip" dest="package-tests"/>

    <!-- hack to support data files in test packages -->
    <unzip src="package-tests/${tar.cascading.prefix}/${jar.cascading-test}"
           dest="package-tests/${tar.cascading.prefix}/build/test">
      <patternset>
        <include name="data/**"/>
      </patternset>
    </unzip>

    <ant inheritAll="false" antfile="package-tests/${tar.cascading.prefix}/build.xml"
         target="test-package">
      <property name="hadoop.home" value="${hadoop.home}"/>
    </ant>

  </target>

  <target name="test-package">
    <echo message="running all packaged cascading tests..."/>

    <mkdir dir="tests"/>
    <mkdir dir="tests/log"/>
    <mkdir dir="tests/results"/>

    <junit printsummary="true" showoutput="${test.showoutput}" fork="yes" haltonerror="no" haltonfailure="no" dir="."
           maxmemory="756m">

      <sysproperty key="test.cluster.enabled" value="${test.cluster.enabled}"/>
      <sysproperty key="test.build.data" value="tests/data"/>
      <sysproperty key="hadoop.log.dir" value="tests/log"/>

      <!--<jvmarg value="-Xdebug"/>--><!--<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"/>-->

      <classpath>
        <path refid="package.classpath"/>
        <pathelement path="${java.class.path}"/>
      </classpath>
      <formatter type="plain" usefile="true"/>

      <test name="${testcase}" todir="${test.results}" if="testcase" haltonfailure="${test.haltonerror}"/>
      <batchtest todir="tests/results" haltonfailure="${test.haltonerror}" unless="testcase">
        <fileset dir="${src.test}">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>

  </target>

  <!-- cleans up build artifacts -->
  <target name="clean">
    <echo message="cleaning cascading..."/>
    <delete dir="${build}"/>
    <delete dir="${javadoc}"/>
  </target>

  <!-- removes build -->
  <target name="nuke">
    <echo message="nuking cascading..."/>
    <delete dir="${build}"/>
    <delete dir="${javadoc}"/>
    <delete dir="${dist}"/>
    <delete dir="${log}"/>
    <delete dir="package-tests"/>
    <delete dir="tests"/>

    <delete>
      <fileset dir="." includes="cascading*.tgz"/>
      <fileset dir="." includes="TEST-*"/>
      <fileset dir="." includes="junit*.properties"/>
      <fileset dir="." includes="**/.DS_Store"/>
    </delete>

  </target>

  <!-- jar build -->
  <target name="jar" depends="compile">

    <echo message="jarring cascading..."/>
    <delete file="${build}/${jar.cascading}"/>
    <delete file="${build}/${jar.cascading-core}"/>
    <delete file="${build}/${jar.cascading-xml}"/>
    <delete file="${build}/${jar.cascading-local}"/>
    <delete file="${build}/${jar.cascading-hadoop}"/>
    <delete file="${build}/${jar.cascading-test}"/>
    <delete dir="${build.core}/lib"/>

    <manifest file="${build}/MANIFEST.MF">
      <attribute name="Built-By" value="${user.name}"/>
    </manifest>

    <jar jarfile="${build}/${jar.cascading-core}" manifest="${build}/MANIFEST.MF" compress="yes">
      <fileset dir="${build.core}"/>
    </jar>

    <jar jarfile="${build}/${jar.cascading-xml}" manifest="${build}/MANIFEST.MF" compress="yes">
      <fileset dir="${build.xml}"/>
    </jar>

    <jar jarfile="${build}/${jar.cascading-local}" manifest="${build}/MANIFEST.MF" compress="yes">
      <fileset dir="${build.xml}"/>
    </jar>

    <jar jarfile="${build}/${jar.cascading-hadoop}" manifest="${build}/MANIFEST.MF" compress="yes">
      <fileset dir="${build.xml}"/>
    </jar>

    <jar jarfile="${build}/${jar.cascading-test}" manifest="${build}/MANIFEST.MF" compress="yes">
      <fileset dir="${build.test}">
        <include name="cascading/**"/>
        <include name="data/**"/>
        <include name="log4j.properties"/>
        <include name="hadoop-site.xml"/>
      </fileset>
    </jar>

    <!-- hadoop supports jars in a lib directory -->
    <mkdir dir="${build.core}/lib"/>

    <copy todir="${build.core}/lib">
      <fileset dir="${lib}">
        <include name="*.jar"/>
      </fileset>
    </copy>

    <delete dir="${build.core}/META-INF"/>

    <mkdir dir="${build.xml}/lib"/>

    <copy todir="${build.xml}/lib">
      <fileset dir="${lib.xml}">
        <include name="*.jar"/>
      </fileset>
    </copy>

    <delete dir="${build.core}/META-INF"/>

    <jar jarfile="${build}/${jar.cascading}" manifest="${build}/MANIFEST.MF" compress="yes">
      <fileset dir="${build.core}"/>
      <fileset dir="${build.xml}"/>
    </jar>

  </target>

  <target name="echo-dist-buildnum" unless="cascading.release.final">
    <mkdir dir="${dist}"/>
    <echo message="build.number=${cascading.release.build}" file="${dist}/build.number.properties"/>
  </target>

  <target name="dist" depends="jar,javadoc,echo-dist-buildnum">
    <echo message="creating version: ${cascading.release.full}"/>

    <mkdir dir="${dist}"/>

    <copy todir="${dist}">

      <fileset dir=".">
        <exclude name="build.properties"/>
        <exclude name="parent-build.xml"/>

        <exclude name=".git*/**"/>
        <exclude name="build/**"/>
        <exclude name="dist/**"/>
        <exclude name="tests/**"/>
        <exclude name="package-tests/**"/>
        <exclude name="www/**"/>
        <exclude name="log/**"/>

        <exclude name="**/CVS/**"/>
        <exclude name="**/*.tgz"/>
        <exclude name="TEST-*"/>
        <exclude name="**/.DS_Store"/>
      </fileset>

    </copy>

    <copy file="${build}/${jar.cascading}" todir="${dist}"/>
    <copy file="${build}/${jar.cascading-core}" todir="${dist}"/>
    <copy file="${build}/${jar.cascading-xml}" todir="${dist}"/>
    <copy file="${build}/${jar.cascading-local}" todir="${dist}"/>
    <copy file="${build}/${jar.cascading-hadoop}" todir="${dist}"/>
    <copy file="${build}/${jar.cascading-test}" todir="${dist}"/>

  </target>

  <target name="package" depends="nuke,dist">
    <tar destfile="${tar.cascading}"
         compression="gzip" longfile="gnu">
      <tarfileset dir="dist/" prefix="${tar.cascading.prefix}">
        <include name="**/**"/>
      </tarfileset>
    </tar>
  </target>

  <property name="package.aws.accessId" value=""/>
  <property name="package.aws.secretKey" value=""/>
  <property name="build.vcs.number" value=""/>
  <property name="package.remote.path" value=""/>
  <property name="package.remote.keyfile" value=""/>

  <target name="s3-package" if="package.remote.bucket">

    <taskdef name="S3Upload" classname="dak.ant.taskdefs.S3Upload"/>

    <S3Upload verbose="true"
              accessId="${package.aws.accessId}"
              secretKey="${package.aws.secretKey}"
              bucket="${package.remote.bucket}"
              prefix="cascading/${cascading.release.major}/"
              publicRead="true">
      <fileset file="${tar.cascading}"/>
    </S3Upload>

    <echo
      message="http://${package.remote.bucket}/cascading/${cascading.release.major}/${tar.cascading} ${build.vcs.number}"
      file="cascading-current.txt"/>

    <property name="package.remote.port" value="22"/>
    <scp file="cascading-current.txt" remoteTofile="${package.remote.path}/${cascading.release.major}/${tar.cascading}"
         keyfile="${package.remote.keyfile}"
         passphrase="" port="${package.remote.port}" trust="true"/>

    <delete file="cascading-current.txt"/>

  </target>

  <target name="retrieve">
    <ivy:settings id="ivy.conjars.settings" url="http://conjars.org/repo/ivysettings.xml"/>

    <ivy:retrieve settingsRef="ivy.conjars.settings" conf="core,xml,local,hadoop,test"
                  pattern="${lib}/[conf]/[artifact]-[revision].[ext]" sync="true"/>
  </target>

  <target name="make-pom" depends="jar">

    <ivy:makepom ivyfile="ivy.xml" artifactName="cascading-core"
                 pomfile="${build}/cascading-core-${cascading.release.full}.pom"
                 conf="core,default.provided">
      <ivy:mapping conf="core" scope="compile"/>
      <ivy:mapping conf="default.provided" scope="provided"/>
    </ivy:makepom>

    <ivy:makepom ivyfile="ivy.xml" artifactName="cascading-local"
                 pomfile="${build}/cascading-local-${cascading.release.full}.pom"
                 conf="core,default.provided">
      <ivy:mapping conf="core" scope="compile"/>
      <ivy:mapping conf="default.provided" scope="provided"/>
    </ivy:makepom>

    <ivy:makepom ivyfile="ivy.xml" artifactName="cascading-hadoop"
                 pomfile="${build}/cascading-hadoop-${cascading.release.full}.pom"
                 conf="core,default.provided">
      <ivy:mapping conf="core" scope="compile"/>
      <ivy:mapping conf="default.provided" scope="provided"/>
    </ivy:makepom>

    <ivy:makepom ivyfile="ivy.xml" artifactName="cascading-xml"
                 pomfile="${build}/cascading-xml-${cascading.release.full}.pom"
                 conf="xml">
      <dependency group="cascading" artifact="cascading-core" version="${cascading.release.full}"/>
      <ivy:mapping conf="xml" scope="compile"/>
    </ivy:makepom>

    <ivy:makepom ivyfile="ivy.xml" artifactName="cascading-test"
                 pomfile="${build}/cascading-test-${cascading.release.full}.pom"
                 conf="test,test.provided">
      <dependency group="cascading" artifact="cascading-core" version="${cascading.release.full}" scope="test"/>
      <dependency group="cascading" artifact="cascading-xml" version="${cascading.release.full}" scope="test"/>
      <dependency group="cascading" artifact="cascading-local" version="${cascading.release.full}" scope="test"/>
      <dependency group="cascading" artifact="cascading-hadoop" version="${cascading.release.full}" scope="test"/>
      <ivy:mapping conf="test.provided" scope="provided"/>
      <ivy:mapping conf="test" scope="compile"/>
    </ivy:makepom>

  </target>

  <target name="publish-m2-local" depends="jar,make-pom"
          description="publish jar/source to maven repo mounted at ~/.m2/repository">

    <ivy:settings id="ivy.conjars.settings" url="http://conjars.org/repo/ivysettings.xml"/>

    <ivy:resolve settingsRef="ivy.conjars.settings" file="ivy.xml"/>

    <ivy:publish settingsRef="ivy.conjars.settings"
                 resolver="local-m2-publish" forcedeliver="true" overwrite="true" publishivy="false">
      <artifacts pattern="${build}/[artifact]-${cascading.release.full}.[ext]"/>
    </ivy:publish>

  </target>

  <target name="publish-local" depends="jar,make-pom"
          description="publish jar/source to local ivy repo">

    <ivy:settings id="ivy.conjars.settings" url="http://conjars.org/repo/ivysettings.xml"/>

    <ivy:resolve settingsRef="ivy.conjars.settings" file="ivy.xml"/>

    <ivy:publish settingsRef="ivy.conjars.settings"
                 resolver="local" forcedeliver="true" overwrite="true" publishivy="true">
      <artifacts pattern="${build}/[artifact]-${cascading.release.full}.[ext]"/>
    </ivy:publish>

  </target>

  <target name="publish" depends="jar,make-pom">

    <scp todir="repo@conjars.org:" keyfile="${repo.keyfile}" passphrase="" trust="true">
      <fileset dir="${build}">
        <include name="cascading-core-${cascading.release.full}.pom"/>
        <include name="${jar.cascading-core}"/>
      </fileset>
    </scp>

    <scp todir="repo@conjars.org:" keyfile="${repo.keyfile}" passphrase="" trust="true">
      <fileset dir="${build}">
        <include name="cascading-xml-${cascading.release.full}.pom"/>
        <include name="${jar.cascading-xml}"/>
      </fileset>
    </scp>

    <scp todir="repo@conjars.org:" keyfile="${repo.keyfile}" passphrase="" trust="true">
      <fileset dir="${build}">
        <include name="cascading-local-${cascading.release.full}.pom"/>
        <include name="${jar.cascading-local}"/>
      </fileset>
    </scp>

    <scp todir="repo@conjars.org:" keyfile="${repo.keyfile}" passphrase="" trust="true">
      <fileset dir="${build}">
        <include name="cascading-hadoop-${cascading.release.full}.pom"/>
        <include name="${jar.cascading-hadoop}"/>
      </fileset>
    </scp>

    <scp todir="repo@conjars.org:" keyfile="${repo.keyfile}" passphrase="" trust="true">
      <fileset dir="${build}">
        <include name="cascading-test-${cascading.release.full}.pom"/>
        <include name="${jar.cascading-test}"/>
      </fileset>
    </scp>

  </target>

</project>
