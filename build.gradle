/*
 * Copyright (c) 2007-2011 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
  Using:

  To run a single test:
    > gradle -Dtest.single=CoGroupFieldedPipesTest :src:local:test

  To remotely debug use
    -Dtest.debug

 */

apply from: 'version.gradle'

configurations {
  sshAntTask
  s3AntTask
}

dependencies {
  sshAntTask 'org.apache.ant:ant-jsch:1.7.1', 'jsch:jsch:0.1.29'
  s3AntTask 'thirdparty:awstasks:0.3'
}

repositories {
  mavenLocal()
  mavenCentral()
  mavenRepo name: 'conjars', urls: 'http://conjars.org/repo/'
  mavenRepo name: 'apache', urls: 'https://repository.apache.org/content/repositories/releases/'
}

subprojects { subproject ->
  if( subproject.name != 'src' )
  {
    apply plugin: 'java'
    apply plugin: 'maven'

    buildDir = "${rootDir}/build"
    group = 'cascading'
    version = releaseVersion
    platformVersion = releasePlatformVersion

    configurations {
      sshAntTask
    }

    repositories {
      mavenLocal()
      mavenCentral()
      mavenRepo name: 'conjars', urls: 'http://conjars.org/repo/'
      mavenRepo name: 'apache', urls: 'https://repository.apache.org/content/repositories/releases/'
    }

    dependencies {
      sshAntTask 'org.apache.ant:ant-jsch:1.7.1', 'jsch:jsch:0.1.29'
    }

    task repoUpload(dependsOn: jar) {
      repoURL = 'repo@conjars.org:'
      repoPort = '22'
      repoKeyfile = System.properties[ 'repo.keyfile' ]
      repoKeyfilePassphrase = ''
    }

    repoUpload << {

      pom {
        artifactId = "cascading-${artifactId}"

        whenConfigured { pom ->
          pom.dependencies.findAll { dep ->
            dep.groupId == 'cascading'
          }.each { dep ->
            dep.artifactId = "cascading-${dep.artifactId}"
          }
        }

        project {
          licenses {
            license {
              name 'The Apache Software License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              distribution 'repo'
            }
          }
        }
      }.writeTo("${buildDir}/poms/${project.name}/pom.xml")

      ant.taskdef(name: 'scp', classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
              classpath: configurations.sshAntTask.asPath)

      assert repoKeyfile

      // conjars expects to see no directories, just files
      ant.scp(todir: repoURL,
              keyfile: repoKeyfile, passphrase: repoKeyfilePassphrase, port: repoPort, trust: 'true') {

        fileset(dir: "${buildDir}/poms/${project.name}") {
          name = "pom.xml"
        }
        fileset(dir: "${buildDir}/libs/") {
          name = "cascading-${project.name}-*.jar"
        }
      }
    }

    task ideLibs(type: Sync) {
      description = 'Copies the dependencies to the lib folder for use in an ide.'
      from {
        configurations.runtime.files { dep -> !(dep instanceof ProjectDependency) }
      }
      into "${rootDir}/lib/${subproject.name}"
    }

    javadoc.onlyIf { false }
  }
}

task javadocAll(type: Javadoc, dependsOn: ['src:core:assemble', 'src:local:assemble', 'src:hadoop:assemble', 'src:xml:assemble', 'src:test:assemble']) {

  def nonSrcSubprojects = subprojects.findAll { !['src', 'test'].contains(it.name) }
  source nonSrcSubprojects.collect { it.sourceSets.main.allJava }

  source 'src/test/cascading/CascadingTestCase.java'
  source 'src/test/cascading/PlatformTestCase.java'
  source 'src/test/cascading/tuple/TupleListCollector.java'
  source 'src/test/cascading/test/TestPlatform.java'
  source 'src/test/cascading/test/LocalPlatform.java'
  source 'src/test/cascading/test/HadoopPlatform.java'
  source 'src/test/cascading/test/PlatformTest.java'

  copyright = '<i>Copyright &#169; 2007-2011 Concurrent, Inc. All Rights Reserved.</i>'
  title = "Cascading ${releaseVersion}"

  classpath = files(nonSrcSubprojects.collect { subproject -> subproject.sourceSets.main.compileClasspath })
  classpath = files(childProjects[ 'src' ].childProjects[ 'test' ].sourceSets.main.compileClasspath)

  destinationDir = new File(rootDir, 'build/docs/javadoc')

  configure(options) {
    encoding = "UTF8"
    bottom = copyright
    links = [
            'http://java.sun.com/javase/6/docs/api/',
            'http://dist.codehaus.org/janino/javadoc/',
            'http://hadoop.apache.org/common/docs/r0.20.2/api/'
    ]
  }
}

task buildDist(dependsOn: javadocAll) << {
  def distDir = mkdir("${rootDir}/build/dist")

  copy {
    from 'CHANGES.txt'
    from 'README.txt'
    from 'apl.txt'
    from 'LICENSE.txt'
    into distDir
  }

  copy {
    from javadocAll.destinationDir
    into "${distDir}/javadoc"
  }
}

task buildPackage(type: Tar, dependsOn: buildDist) {
  description = "package current build, does not run tests"

  def distDir = mkdir("${rootDir}/build/dist")

  destinationDir = buildDir
  baseName = "cascading-${releaseVersion}-${releasePlatformVersion}"
  compression = "GZIP"

  into(baseName) {
    from distDir
  }
}

task prepareRelease(dependsOn: ['src:core:build', 'src:local:build', 'src:hadoop:build', 'src:xml:build', 'src:test:build'])

task repoRelease(dependsOn: [prepareRelease, 'src:core:repoUpload', 'src:local:repoUpload', 'src:hadoop:repoUpload', 'src:xml:repoUpload', 'src:test:repoUpload'])

task s3Upload(dependsOn: buildPackage) {

  awsAccessId = System.properties[ 'publish.aws.accessId' ]
  awsSecretKey = System.properties[ 'publish.aws.secretKey' ]
  s3Bucket = System.properties[ 'publish.bucket' ]

  remotePath = "cascading/${majorVersion}/"

  archive = buildPackage.archivePath
}

s3Upload << {

  ant.taskdef(name: 's3Upload', classname: 'dak.ant.taskdefs.S3Upload',
          classpath: configurations.s3AntTask.asPath)

  ant.s3Upload(verbose: 'true', accessId: awsAccessId, secretKey: awsSecretKey,
          bucket: s3Bucket, prefix: remotePath, publicRead: 'true') {
    fileset(file: archive)
  }
}

task sitePublish(dependsOn: s3Upload) << {

  assert currentCommit

  def publishBucket = System.properties[ 'publish.bucket' ]
  def publishDownloadPath = System.properties[ 'publish.download.path' ]
  def publishPort = !System.properties[ 'publish.port' ] ? '22' : System.properties[ 'publish.port' ]
  def publishKeyFile = System.properties[ 'publish.keyfile' ]

  def releaseTar = buildPackage.archivePath.name

  def currentPath = new File(buildDir, 'cascading-current.txt')

  currentPath.write("http://${publishBucket}/cascading/${majorVersion}/${releaseTar} ${currentCommit}")

  ant.taskdef(name: 'scp', classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
          classpath: configurations.sshAntTask.asPath)

  def remoteToFile = "${publishDownloadPath}/cascading/${majorVersion}/${releaseTar}"

  ant.scp(file: currentPath, remoteToFile: remoteToFile,
          keyfile: publishKeyFile, passphrase: '', port: publishPort, trust: 'true')
}
